import React, { useState } from 'react';
import { 
  BarChart, 
  Bell, 
  Calendar, 
  CheckCircle, 
  Edit, 
  MoreVertical, 
  Plus, 
  Star,
  Trash2,
  Trophy
} from 'lucide-react';

import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";

const priorities = {
  high: { label: 'High', color: 'bg-red-500' },
  medium: { label: 'Medium', color: 'bg-yellow-500' },
  low: { label: 'Low', color: 'bg-green-500' }
};

const initialTasks = [
  { 
    id: 1, 
    title: 'Complete project proposal', 
    description: 'Draft and submit the Q1 project proposal',
    deadline: '2024-11-15',
    priority: 'high',
    completed: false
  },
  { 
    id: 2, 
    title: 'Weekly team meeting', 
    description: 'Review progress and plan next steps',
    deadline: '2024-11-12',
    priority: 'medium',
    completed: true
  }
];

const Dashboard = () => {
  const [tasks, setTasks] = useState(initialTasks);
  const [showNewTaskForm, setShowNewTaskForm] = useState(false);
  const [editingTask, setEditingTask] = useState(null);
  const [newTask, setNewTask] = useState({
    title: '',
    description: '',
    deadline: '',
    priority: 'medium'
  });

  const handleAddTask = (e) => {
    e.preventDefault();
    const task = {
      id: tasks.length + 1,
      ...newTask,
      completed: false
    };
    setTasks([...tasks, task]);
    setNewTask({
      title: '',
      description: '',
      deadline: '',
      priority: 'medium'
    });
    setShowNewTaskForm(false);
  };

  const handleEditTask = (task) => {
    setEditingTask(task);
    setNewTask({
      title: task.title,
      description: task.description,
      deadline: task.deadline,
      priority: task.priority
    });
  };

  const handleUpdateTask = (e) => {
    e.preventDefault();
    const updatedTasks = tasks.map(task => 
      task.id === editingTask.id 
        ? { ...task, ...newTask }
        : task
    );
    setTasks(updatedTasks);
    setEditingTask(null);
    setNewTask({
      title: '',
      description: '',
      deadline: '',
      priority: 'medium'
    });
  };

  const handleDeleteTask = (taskId) => {
    setTasks(tasks.filter(task => task.id !== taskId));
  };

  const toggleTaskComplete = (taskId) => {
    setTasks(tasks.map(task => 
      task.id === taskId 
        ? { ...task, completed: !task.completed }
        : task
    ));
  };

  const TaskForm = ({ onSubmit, isEditing }) => (
    <form onSubmit={onSubmit} className="space-y-4 p-4 bg-white rounded-lg shadow">
      <div>
        <label className="block text-sm font-medium mb-1">Title</label>
        <input
          type="text"
          value={newTask.title}
          onChange={(e) => setNewTask({ ...newTask, title: e.target.value })}
          className="w-full p-2 border rounded focus:ring-2 focus:ring-blue-500"
          required
        />
      </div>
      <div>
        <label className="block text-sm font-medium mb-1">Description</label>
        <textarea
          value={newTask.description}
          onChange={(e) => setNewTask({ ...newTask, description: e.target.value })}
          className="w-full p-2 border rounded focus:ring-2 focus:ring-blue-500"
          rows="3"
        />
      </div>
      <div className="grid grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium mb-1">Deadline</label>
          <input
            type="date"
            value={newTask.deadline}
            onChange={(e) => setNewTask({ ...newTask, deadline: e.target.value })}
            className="w-full p-2 border rounded focus:ring-2 focus:ring-blue-500"
            required
          />
        </div>
        <div>
          <label className="block text-sm font-medium mb-1">Priority</label>
          <select
            value={newTask.priority}
            onChange={(e) => setNewTask({ ...newTask, priority: e.target.value })}
            className="w-full p-2 border rounded focus:ring-2 focus:ring-blue-500"
          >
            {Object.entries(priorities).map(([key, { label }]) => (
              <option key={key} value={key}>{label}</option>
            ))}
          </select>
        </div>
      </div>
      <div className="flex justify-end space-x-2">
        <button
          type="button"
          onClick={() => {
            setShowNewTaskForm(false);
            setEditingTask(null);
          }}
          className="px-4 py-2 text-gray-600 hover:bg-gray-100 rounded"
        >
          Cancel
        </button>
        <button
          type="submit"
          className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
        >
          {isEditing ? 'Update Task' : 'Add Task'}
        </button>
      </div>
    </form>
  );

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Navigation */}
      <nav className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16">
            <div className="flex items-center">
              <h1 className="text-xl font-bold text-gray-900">Dashboard</h1>
            </div>
            <div className="flex items-center space-x-4">
              <button className="p-2 text-gray-400 hover:text-gray-500">
                <Bell className="h-6 w-6" />
              </button>
              <div className="flex items-center space-x-2">
                <div className="w-8 h-8 bg-blue-500 rounded-full"></div>
                <span className="text-sm font-medium text-gray-700">John Doe</span>
              </div>
            </div>
          </div>
        </div>
      </nav>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Tasks Section */}
          <div className="lg:col-span-2">
            <Card>
              <CardHeader className="flex flex-row items-center justify-between">
                <div>
                  <CardTitle>Tasks</CardTitle>
                  <CardDescription>Manage your daily tasks and goals</CardDescription>
                </div>
                <button
                  onClick={() => setShowNewTaskForm(true)}
                  className="p-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 flex items-center"
                >
                  <Plus className="h-5 w-5" />
                  <span className="ml-1">Add Task</span>
                </button>
              </CardHeader>
              <CardContent>
                {showNewTaskForm && <TaskForm onSubmit={handleAddTask} isEditing={false} />}
                {editingTask && <TaskForm onSubmit={handleUpdateTask} isEditing={true} />}
                
                <div className="space-y-4">
                  {tasks.map(task => (
                    <div
                      key={task.id}
                      className={`p-4 bg-white rounded-lg border ${
                        task.completed ? 'border-green-200 bg-green-50' : 'border-gray-200'
                      }`}
                    >
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-3">
                          <button
                            onClick={() => toggleTaskComplete(task.id)}
                            className={`p-1 rounded-full ${
                              task.completed ? 'text-green-500' : 'text-gray-400 hover:text-gray-500'
                            }`}
                          >
                            <CheckCircle className="h-5 w-5" />
                          </button>
                          <div>
                            <h3 className={`font-medium ${task.completed ? 'line-through text-gray-500' : 'text-gray-900'}`}>
                              {task.title}
                            </h3>
                            <p className="text-sm text-gray-500">{task.description}</p>
                          </div>
                        </div>
                        <div className="flex items-center space-x-2">
                          <span className={`px-2 py-1 text-xs rounded-full ${priorities[task.priority].color} text-white`}>
                            {priorities[task.priority].label}
                          </span>
                          <button
                            onClick={() => handleEditTask(task)}
                            className="p-1 text-gray-400 hover:text-gray-500"
                          >
                            <Edit className="h-4 w-4" />
                          </button>
                          <button
                            onClick={() => handleDeleteTask(task.id)}
                            className="p-1 text-gray-400 hover:text-red-500"
                          >
                            <Trash2 className="h-4 w-4" />
                          </button>
                        </div>
                      </div>
                      <div className="mt-2 text-sm text-gray-500">
                        Due: {new Date(task.deadline).toLocaleDateString()}
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Progress Overview */}
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Progress Overview</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div>
                    <div className="flex justify-between text-sm mb-1">
                      <span>Tasks Completed</span>
                      <span>{tasks.filter(t => t.completed).length}/{tasks.length}</span>
                    </div>
                    <div className="h-2 bg-gray-200 rounded-full">
                      <div
                        className="h-full bg-blue-500 rounded-full"
                        style={{
                          width: `${(tasks.filter(t => t.completed).length / tasks.length) * 100}%`
                        }}
                      ></div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Quick Actions</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-2 gap-4">
                  <button className="p-4 bg-gray-50 rounded-lg hover:bg-gray-100 flex flex-col items-center">
                    <Calendar className="h-6 w-6 text-blue-500 mb-2" />
                    <span className="text-sm">Calendar</span>
                  </button>
                  <button className="p-4 bg-gray-50 rounded-lg hover:bg-gray-100 flex flex-col items-center">
                    <BarChart className="h-6 w-6 text-blue-500 mb-2" />
                    <span className="text-sm">Analytics</span>
                  </button>
                  <button className="p-4 bg-gray-50 rounded-lg hover:bg-gray-100 flex flex-col items-center">
                    <Star className="h-6 w-6 text-blue-500 mb-2" />
                    <span className="text-sm">Goals</span>
                  </button>
                  <button className="p-4 bg-gray-50 rounded-lg hover:bg-gray-100 flex flex-col items-center">
                    <Trophy className="h-6 w-6 text-blue-500 mb-2" />
                    <span className="text-sm">Achievements</span>
                  </button>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </main>
    </div>
  );
};

export default Dashboard;
