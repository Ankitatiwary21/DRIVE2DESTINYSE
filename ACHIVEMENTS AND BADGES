import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Trophy, Share2, Medal, Target, Flame, Award, Star, Crown } from 'lucide-react';

const achievements = [
  {
    id: 1,
    title: "7-Day Streak Master",
    description: "Completed all daily tasks for 7 consecutive days",
    icon: Flame,
    date: "2024-11-07",
    category: "Streak",
    color: "bg-orange-500"
  },
  {
    id: 2,
    title: "Productivity Champion",
    description: "Completed 50 tasks in one week",
    icon: Trophy,
    date: "2024-11-05",
    category: "Milestone",
    color: "bg-yellow-500"
  },
  {
    id: 3,
    title: "Goal Crusher",
    description: "Achieved all monthly goals before deadline",
    icon: Target,
    date: "2024-11-01",
    category: "Goals",
    color: "bg-green-500"
  },
  {
    id: 4,
    title: "Team Leader",
    description: "Top performer in team challenges",
    icon: Crown,
    date: "2024-10-28",
    category: "Leadership",
    color: "bg-purple-500"
  },
  {
    id: 5,
    title: "Perfect Week",
    description: "100% task completion rate for a week",
    icon: Star,
    date: "2024-10-21",
    category: "Performance",
    color: "bg-blue-500"
  }
];

const AchievementsShowcase = () => {
  const [selectedAchievement, setSelectedAchievement] = useState(null);

  const handleShare = (achievement) => {
    const shareText = `🏆 I just earned the "${achievement.title}" achievement!\n${achievement.description}\n#ProductivityChampion #Achievement`;
    
    // If Web Share API is available, use it
    if (navigator.share) {
      navigator.share({
        title: 'My Achievement',
        text: shareText,
        url: window.location.href,
      }).catch(console.error);
    } else {
      // Fallback to copying to clipboard
      navigator.clipboard.writeText(shareText)
        .then(() => alert('Achievement copied to clipboard!'))
        .catch(console.error);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 p-8">
      <div className="max-w-7xl mx-auto space-y-8">
        {/* Header */}
        <div className="text-center space-y-4">
          <h1 className="text-4xl font-bold text-gray-900">My Achievements</h1>
          <p className="text-xl text-gray-600">Showcase your productivity milestones</p>
        </div>

        {/* Achievement Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
          <Card>
            <CardContent className="pt-6">
              <div className="flex items-center space-x-2">
                <Trophy className="h-8 w-8 text-yellow-500" />
                <div>
                  <p className="text-sm text-gray-500">Total Achievements</p>
                  <p className="text-2xl font-bold">12</p>
                </div>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="pt-6">
              <div className="flex items-center space-x-2">
                <Medal className="h-8 w-8 text-blue-500" />
                <div>
                  <p className="text-sm text-gray-500">Current Streak</p>
                  <p className="text-2xl font-bold">7 days</p>
                </div>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="pt-6">
              <div className="flex items-center space-x-2">
                <Award className="h-8 w-8 text-purple-500" />
                <div>
                  <p className="text-sm text-gray-500">Rank</p>
                  <p className="text-2xl font-bold">Gold</p>
                </div>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="pt-6">
              <div className="flex items-center space-x-2">
                <Star className="h-8 w-8 text-green-500" />
                <div>
                  <p className="text-sm text-gray-500">Next Achievement</p>
                  <p className="text-2xl font-bold">2 days</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Achievements Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {achievements.map((achievement) => {
            const IconComponent = achievement.icon;
            return (
              <Card 
                key={achievement.id}
                className="transform transition-all hover:scale-105 cursor-pointer"
                onClick={() => setSelectedAchievement(achievement)}
              >
                <CardContent className="pt-6">
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-4">
                        <div className={`p-3 rounded-xl ${achievement.color}`}>
                          <IconComponent className="h-6 w-6 text-white" />
                        </div>
                        <div>
                          <h3 className="font-semibold">{achievement.title}</h3>
                          <p className="text-sm text-gray-500">{achievement.date}</p>
                        </div>
                      </div>
                      <button 
                        className="p-2 hover:bg-gray-100 rounded-full transition-colors"
                        onClick={(e) => {
                          e.stopPropagation();
                          handleShare(achievement);
                        }}
                      >
                        <Share2 className="h-5 w-5 text-gray-500" />
                      </button>
                    </div>
                    <p className="text-gray-600">{achievement.description}</p>
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-gray-500">{achievement.category}</span>
                      {achievement.id === 1 && (
                        <span className="text-xs bg-blue-100 text-blue-600 px-2 py-1 rounded-full">
                          Latest
                        </span>
                      )}
                    </div>
                  </div>
                </CardContent>
              </Card>
            );
          })}
        </div>

        {/* Share Preview */}
        {selectedAchievement && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4">
            <Card className="max-w-md w-full">
              <CardHeader>
                <CardTitle>Share Achievement</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex items-center space-x-4">
                    <div className={`p-4 rounded-xl ${selectedAchievement.color}`}>
                      {React.createElement(selectedAchievement.icon, { className: "h-8 w-8 text-white" })}
                    </div>
                    <div>
                      <h3 className="font-semibold">{selectedAchievement.title}</h3>
                      <p className="text-sm text-gray-500">{selectedAchievement.description}</p>
                    </div>
                  </div>
                  <div className="flex space-x-4">
                    <button 
                      className="flex-1 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition"
                      onClick={() => handleShare(selectedAchievement)}
                    >
                      Share
                    </button>
                    <button 
                      className="px-4 py-2 border rounded-lg hover:bg-gray-50 transition"
                      onClick={() => setSelectedAchievement(null)}
                    >
                      Cancel
                    </button>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        )}
      </div>
    </div>
  );
};

export default AchievementsShowcase;
